hf_xZDGLqZTAouKJvsCdHHHbHKZTPzYUUBgZ e



# 下载并安装 Google Cloud SDK（包含 gsutil）
curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-460.0.0-linux-x86_64.tar.gz
tar -xf google-cloud-cli-460.0.0-linux-x86_64.tar.gz
./google-cloud-sdk/install.sh --quiet

# 添加路径
source ./google-cloud-sdk/path.bash.inc

gsutil version

gsutil ls gs://gresearch/android_control/

gsutil -m cp -r gs://gresearch/android_control/ ./android_control/

(torch_cmx) root@mm-fudan-chai-l20-1-0:/opt/nas/p/mm/ie_env/cmx/HONOR_TEST3# gsutil ls gs://gresearch/android_control/
gs://gresearch/android_control/
gs://gresearch/android_control/android_control-00000-of-00020
gs://gresearch/android_control/android_control-00001-of-00020
gs://gresearch/android_control/android_control-00002-of-00020
gs://gresearch/android_control/android_control-00003-of-00020
gs://gresearch/android_control/android_control-00004-of-00020
gs://gresearch/android_control/android_control-00005-of-00020
gs://gresearch/android_control/android_control-00006-of-00020
gs://gresearch/android_control/android_control-00007-of-00020
gs://gresearch/android_control/android_control-00008-of-00020
gs://gresearch/android_control/android_control-00009-of-00020
gs://gresearch/android_control/android_control-00010-of-00020
gs://gresearch/android_control/android_control-00011-of-00020
gs://gresearch/android_control/android_control-00012-of-00020
gs://gresearch/android_control/android_control-00013-of-00020
gs://gresearch/android_control/android_control-00014-of-00020
gs://gresearch/android_control/android_control-00015-of-00020
gs://gresearch/android_control/android_control-00016-of-00020
gs://gresearch/android_control/android_control-00017-of-00020
gs://gresearch/android_control/android_control-00018-of-00020
gs://gresearch/android_control/android_control-00019-of-00020
gs://gresearch/android_control/splits.json
gs://gresearch/android_control/test_subsplits.json

创建一个目录
(torch_cmx) root@mm-fudan-chai-l20-1-0:/opt/nas/p/mm/ie_env/cmx/HONOR_TEST3# gsutil -m cp gs://gresearch/android_control/* ./android_control/


import json
import os

def function(template_path, input_file, outout_file):
    f = open(template_path).readlines()

    input_list = []
    for item in f:
        item = json.loads(item)
        input_list.append(item)

    compare_list = {}

    f = open(input_file).readlines()
    for item in f:
        item = json.loads(item)
        compare_list[item["images"][0]["path"]] = item["response"]

    for item in input_list:
        img = item["image_path"]
        response = compare_list[img]

        if "before_trans" in item:
            before_trans = item["before_trans"]
            item["before_trans"] = response
            item["generate_content"] = item["generate_content"].replace(before_trans, response)

        result = {"STATUS": "continue"}
        
        # auxiliary function to extract coordinates
        def extract_coords(s):
            # directly find and extract the coordinates in the parentheses
            start = s.find("(")
            end = s.find(")")
            if start != -1 and end != -1:
                coords_str = s[start+1:end].strip()  # extract the content in (x,y)
                x, y = coords_str.split(",")
                return [int(x), int(y)]
            raise ValueError(f"Cannot find coordinates in the string: {s}")
        
        if "tap(" in response:
            result["POINT"] = extract_coords(response)
            
        elif "long_press(" in response:
            result["POINT"] = extract_coords(response)
            result["duration"] = 1000
                
        elif "text(" in response:
            content = response.split(",")[-1][:-1]
            result["TYPE"] = content
            
        elif "scroll(" in response:
            direction = response.split(",")[-1][:-1]
            result["POINT"] = [0, 0]  # screen center point
            result["to"] = direction
        elif "navigate_back" in response:
            result["PRESS"] = "BACK"

        elif "navigate_home" in response:
             result["PRESS"] = "HOME"

        elif "wait()" in response:
            result["duration"] = 500
    
        elif "finish()" in response or "Finish()" in response:
            result["STATUS"] = "finish"

        else:
            print(response)

        item["pred"] = result

    outout_path = "/".join(outout_file.split("/")[:-1])
    if not os.path.exists(outout_path):
        os.makedirs(outout_path)
    
    with open(outout_file, 'w', encoding='utf-8') as f:
        for item in input_list:
            json_line = json.dumps(item, ensure_ascii=False)
            f.write(json_line + '\n')

function(template_path="/opt/nas/p/dongshaokang/AgentCPM-GUI/eval/eval_results/V1/CPT630/android_control_low_test_v1/all_copy2.jsonl",
         input_file="/opt/nas/p/dongshaokang/AgentCPM-GUI/eval/eval_data/android_control_honor_inital_test/CPT729/infer_full_hl/response_ac_hl_nothink.json", 
         outout_file='/opt/nas/p/dongshaokang/AgentCPM-GUI/eval/eval_results/V2-Finish-Test/CPT729/ac_low/all.jsonl')


import os
import json
import pandas as pd

def convert_xlsx_to_jsonl(xlsx_file):
    # 读取 Excel 文件
    df = pd.read_excel(xlsx_file)

    # 检查是否包含所需列
    if not {"images", "prediction"}.issubset(df.columns):
        raise ValueError("Excel 文件中必须包含 'images' 和 'prediction' 两列")

    # 构造输出路径
    jsonl_file = os.path.splitext(xlsx_file)[0] + ".jsonl"

    # 写入 JSONL 文件
    with open(jsonl_file, "w", encoding="utf-8") as f:
        for _, row in df.iterrows():
            image_path = row["images"]
            image_name = os.path.basename(image_path)

            item = {
                "images": [{"path": image_name}],
                "response": row["prediction"]
            }

            json_line = json.dumps(item, ensure_ascii=False)
            f.write(json_line + "\n")

    print(f"转换完成，保存到：{jsonl_file}")


